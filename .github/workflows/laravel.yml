name: MS-Fashions

on:
  push:
    branches: [ "master" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'

    - name: Install Composer Dependencies
      run: composer install --optimize-autoloader

    - name: Install Node
      uses: actions/setup-node@v3
      with:
        node-version: '22'

    - name: Install NPM Dependencies
      run: npm ci

    - name: Build NPM Assets
      run: npm run build

    # Setup SSH key for rsync
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

    # Create exclude file for rsync
    - name: Create rsync exclude file
      run: |
        cat > rsync-exclude.txt << 'EOF'
        .git/
        .github/
        node_modules/
        .env
        .env.example
        README.md
        .gitignore
        tests/
        phpunit.xml
        storage/app/
        storage/logs/
        storage/framework/sessions/
        storage/framework/views/
        storage/framework/cache/data/
        bootstrap/cache/
        rsync-exclude.txt
        EOF

    # Prepare server directories
    - name: Prepare server directories
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          # Create main directory
          mkdir -p "${{ secrets.SERVER_DESTINATION }}"
          cd "${{ secrets.SERVER_DESTINATION }}"

          # Create necessary Laravel directories
          mkdir -p storage/app/public
          mkdir -p storage/logs
          mkdir -p storage/framework/{cache/data,sessions,views}
          mkdir -p bootstrap/cache
          mkdir -p public

          # Set proper permissions
          chmod -R 755 storage bootstrap/cache 2>/dev/null || true
        EOF

    # Deploy with rsync
    - name: Deploy with rsync
      run: |
        rsync -avz --delete \
          --exclude-from=rsync-exclude.txt \
          --chmod=D755,F644 \
          --rsync-path="sudo rsync" \
          ./ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.SERVER_DESTINATION }}/

    # Post-deployment tasks
    - name: Post-deployment configuration
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          cd "${{ secrets.SERVER_DESTINATION }}"

          # Create .env file only if it doesn't exist
          if [ ! -f ".env" ]; then
            cat > .env << 'ENVEOF'
        APP_NAME="${{ secrets.APP_NAME }}"
        APP_ENV=${{ secrets.APP_ENV }}
        APP_DEBUG=${{ secrets.APP_DEBUG }}
        APP_KEY=
        APP_URL=${{ secrets.APP_URL }}

        DB_CONNECTION=${{ secrets.DB_CONNECTION }}
        DB_HOST=${{ secrets.DB_HOST }}
        DB_PORT=${{ secrets.DB_PORT }}
        DB_DATABASE=${{ secrets.DB_DATABASE }}
        DB_USERNAME=${{ secrets.DB_USERNAME }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}

        MAIL_MAILER=${{ secrets.MAIL_MAILER }}
        MAIL_HOST=${{ secrets.MAIL_HOST }}
        MAIL_PORT=${{ secrets.MAIL_PORT }}
        MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
        MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
        MAIL_ENCRYPTION=${{ secrets.MAIL_ENCRYPTION }}
        MAIL_FROM_ADDRESS=${{ secrets.MAIL_FROM_ADDRESS }}
        ENVEOF
          fi

          # Generate application key only if APP_KEY is empty
          if ! grep -q "APP_KEY=base64:" .env; then
            php artisan key:generate --force
          fi

          # Set proper permissions
          chmod +x artisan
          chmod -R 775 storage bootstrap/cache
          sudo chown -R www-data:www-data storage bootstrap/cache public/storage 2>/dev/null || true

          # Create storage link if it doesn't exist
          if [ ! -L "public/storage" ]; then
            php artisan storage:link
          fi

          # Run database migrations
          php artisan migrate --force

          # Clear and optimize caches
          php artisan config:clear
          php artisan cache:clear
          php artisan route:clear
          php artisan view:clear
          php artisan optimize:clear
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

          echo "Deployment completed successfully!"
        EOF
